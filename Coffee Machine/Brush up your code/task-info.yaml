type: edu
custom_name: stage6
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\nimport java.util.Scanner;\n\npublic class CoffeeMachine\
    \ {\n    public static void main(String[] args) {\n        System.out.println(\"\
    Write how many cups of coffee you will need:\");\n        Scanner s = new Scanner(System.in);\
    \  // Create a Scanner object\n        int cups = s.nextInt();  // Read user input\n\
    \        int water = 200 * cups;\n        int milk = 50 * cups;\n        int beans\
    \ = 15 * cups;\n        System.out.format(\"%d ml of water\\n\", water);\n   \
    \     System.out.format(\"%d ml of milk\\n\", milk);\n        System.out.format(\"\
    %d g of coffee beans\\n\", beans);\n        \n    }\n}\n"
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/TakeAction.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class TakeAction extends CoffeeMachineAction {
        public TakeAction(CoffeeMachine coffeeMachine) {
            super(coffeeMachine);
        }

        @Override
        public void run(Scanner scan) {
            int money = machine.takeMoney();
            System.out.format("I gave you $%d%n", money);
        }
    }
  learner_created: true
- name: src/machine/BuyAction.java
  visible: true
  text: |+
    package machine;

    import java.util.Scanner;

    public class BuyAction extends CoffeeMachineAction {

        public BuyAction(CoffeeMachine machine) {
            super(machine);
        }

        @Override
        public void run(Scanner scan) {
            System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:");
            var selection = scan.next();
            if(selection.equals("back")) {
                return;
            }
            int recipeNumber = Integer.parseInt(selection); // I'll miss you Int32.TryParse
            var recipe = getRecipe(recipeNumber);
            if(machine.canVend(recipe)) {
                machine.vend(recipe);
            }
        }

        private CoffeeRecipe getRecipe(int selection) {
            switch(selection) {
                case 1: return new EspressoRecipe();
                case 2: return new LatteRecipe();
                case 3: return new CappuccinoRecipe();
            }
            throw new IllegalArgumentException("Invalid selection.");
        }
    }

  learner_created: true
- name: src/machine/EspressoRecipe.java
  visible: true
  text: |+
    package machine;

    public final class EspressoRecipe extends CoffeeRecipe {
        public EspressoRecipe() {
            super(250, 0, 16, 4);
        }
    }

  learner_created: true
- name: src/machine/RemainingAction.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class RemainingAction extends CoffeeMachineAction{
        public RemainingAction(CoffeeMachine coffeeMachine) {
            super(coffeeMachine);
        }

        @Override
        public void run(Scanner scan) {
            machine.printState();
        }
    }
  learner_created: true
- name: src/machine/CoffeeRecipe.java
  visible: true
  text: |+
    package machine;

    public abstract class CoffeeRecipe  {
        private final int cups = 1;
        private final int water;
        private final int milk;
        private final int beans;
        private final int price;

        protected CoffeeRecipe(int water, int milk, int beans, int price) {
            this.water = water;
            this.milk = milk;
            this.beans = beans;
            this.price = price;
        }

        public int getCups() {
            return cups;
        }
        public int getWater() {
            return water;
        }
        public int getMilk() {
            return milk;
        }
        public int getBeans() {
            return beans;
        }
        public int getPrice() {
            return price;
        }
    }

  learner_created: true
- name: src/machine/LatteRecipe.java
  visible: true
  text: |
    package machine;

    public final class LatteRecipe extends CoffeeRecipe {
        public LatteRecipe() {
            super(350, 75, 20, 7);
        }
    }
  learner_created: true
- name: src/machine/CoffeeMachineAction.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public abstract class CoffeeMachineAction {
        protected CoffeeMachine machine;

        public CoffeeMachineAction(CoffeeMachine machine) {
            this.machine = machine;
        }

        public abstract void run(Scanner scan);
    }
  learner_created: true
- name: src/machine/FillAction.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class FillAction extends CoffeeMachineAction {

        public FillAction(CoffeeMachine machine) {
            super(machine);
        }

        public void run(Scanner scan) {
            System.out.println("Write how many ml of water you want to add:");
            int water = scan.nextInt();
            System.out.println("Write how many ml of milk you want to add:");
            int milk = scan.nextInt();
            System.out.println("Write how many grams of coffee beans you want to add:");
            int beans = scan.nextInt();
            System.out.println("Write how many disposable cups of coffee you want to add:");
            int cups = scan.nextInt();
            machine.fill(water, milk, beans, cups);
            /*
    > 2000
    Write how many ml of milk you want to add:
    > 500
    Write how many grams of coffee beans you want to add:
    > 100
    Write how many disposable cups of coffee you want to add:
    > 10
             */
        }
    }
  learner_created: true
- name: src/machine/CappuccinoRecipe.java
  visible: true
  text: |
    package machine;

    public final class CappuccinoRecipe extends CoffeeRecipe {
        public CappuccinoRecipe() {
            super(200, 100, 12, 6);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5334#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 07 May 2022 22:55:25 UTC
record: -1
